name: Main - Build and Publish Latest

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'examples/**'
      - '.gitignore'
      - 'LICENSE'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish-latest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=main
          type=sha,prefix=main-
        labels: |
          org.opencontainers.image.title=AWS S3 Garbage Collector
          org.opencontainers.image.description=Container Docker baseado em futurevision/aws-s3-sync com funcionalidade de limpeza automÃ¡tica de backups antigos
          org.opencontainers.image.vendor=Marcelo Matos
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BACKUP_RETENTION_DAYS=7

    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Latest Build Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Published Images:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Tag | Pull Command |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------------|" >> $GITHUB_STEP_SUMMARY
        echo "| latest | \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "| main | \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main\` |" >> $GITHUB_STEP_SUMMARY
        echo "| main-${{ github.sha }} | \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Build Info:" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/aws-s3-collector-garbage)" >> $GITHUB_STEP_SUMMARY

    - name: Test published image
      run: |
        echo "ðŸ§ª Testing published image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest help
        echo "âœ… Image test successful!"