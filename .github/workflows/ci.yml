name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=AWS S3 Garbage Collector
          org.opencontainers.image.description=Container Docker baseado em futurevision/aws-s3-sync com funcionalidade de limpeza automática de backups antigos
          org.opencontainers.image.vendor=Marcelo Matos
          org.opencontainers.image.licenses=MIT

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BACKUP_RETENTION_DAYS=7

    - name: Test Docker image - Help command
      run: |
        # Build image locally for testing
        docker build -t aws-s3-gc:test .
        
        # Test help command
        echo "Testing help command..."
        docker run --rm aws-s3-gc:test help
        
        # Test garbage collection validation (should fail without credentials)
        echo "Testing validation..."
        if docker run --rm aws-s3-gc:test gc 2>&1 | grep -q "ERROR: Variáveis obrigatórias não definidas"; then
          echo "✅ Validation test passed"
        else
          echo "❌ Validation test failed"
          exit 1
        fi
        
        # Test sync mode (compatibility check)
        echo "Testing sync mode compatibility..."
        # This should fail gracefully due to missing credentials, but the mode should be recognized
        if docker run --rm -e KEY=test -e SECRET=test -e REGION=us-east-1 -e BUCKET=test aws-s3-gc:test sync 2>&1 | grep -q "Modo: Sincronização S3"; then
          echo "✅ Sync mode compatibility test passed"
        else
          echo "❌ Sync mode compatibility test failed"
          exit 1
        fi

    - name: Test build script
      run: |
        chmod +x build.sh
        # Test build script (dry run)
        echo "Testing build script..."
        if ./build.sh 14 | grep -q "Retenção padrão: 14 dias"; then
          echo "✅ Build script test passed"
        else
          echo "❌ Build script test failed"
          exit 1
        fi

    - name: Validate Docker Compose files
      run: |
        # Install docker-compose
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
        # Validate compose files
        echo "Validating docker-compose files..."
        docker-compose -f examples/docker-compose-one-shot.yml config --quiet
        docker-compose -f examples/docker-compose-cron.yml config --quiet
        echo "✅ Docker Compose files are valid"

    - name: Security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: aws-s3-gc:test
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true